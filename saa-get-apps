#!/bin/bash
pname=$(basename "$0")
dname=$(dirname "$0")
usage="$pname [{-t|--target} {apk|ab|apk,ab}] [-l|--list|-q|--quiet|-v|--verbose|-n|--dryrun|--log|--nolog]
$pname {-h|--help}
Features:
  Get (or list) programs (apk files) and/or data (adb backups or raw /data directory images) files
  from a remote Android device using adb command.
  The entity (the programs and the data) are stored to the 'apps' directory, which is a child of
  current directory.
  If a entity is already in the 'apps' directory, it does not get or list.

Options:
  -t|--target {apk|ab|apk,ab}
    Target entities to get from a remote Android device. Default is apk,ab.
  -l|--list
    Instead of getting entities, List entities on a remote Android device.
  -q|--quiet
    No messages are displayed, except error message.
  -v|--verbose
    Additional messages are displayed. It has a precedence over -q|--quiet.
  -n|--dryrun
    Only messages displayed, No SAADirectory is made and no entities is got.
  --log
    Logging almost all messages to logfiles. It is a default.
  --nolog
    No log files created. It is a default when -n|--dryrun or -l|--list.
  -h|--help
    This help message is displayed."

source "$dname/run.sh"

targets='apk,ab'
listp=false
quietp=false
verbosep=false
dryrunp=false
nologp=false
declare -a opts
while true; do
  case "$1" in
  -|--) break;;
  --*) opts=("$1"); shift;;
  -*) for n in $(seq 1 $((${#1}-1))); do opts[$n]="-${1:$n:1}"; done; shift;;
  *) break;;
  esac
  for opt in "${opts[@]}"; do
    case "$opt" in
    -t|--target) targets="$1";;
    -l|--list) listp=true; nologp=true;;
    -q|--quiet) quietp=true;;
    -v|--verbose) verbosep=true;;
    -n|--dryrun) dryrunp=true; verbosep=true; nologp=true;;
    --log) nologp=false;;
    --nolog) nologp=true;;
    -*) echo "$usage"; exit 1;;
    esac
  done
done
targets=$(IFS=$' \t\n,'; echo $targets)
test $# -ne 0 && { echo "$usage"; exit 1;}

case "$dname" in /*);; *) dname="$(pwd)/$dname";; esac

adev="$(_adb devices -l)"
dev=$(echo "$adev" | adb-parsedev -b -o -r -s -u model) || exit 11
stamp=$(date +%Y%m%d-%H%M%S)
log="log-$dev-$stamp-get"
$listp && log="log-$dev-$stamp-getlist"
$nologp && log=/dev/null

(
  $quietp || echo "device: $dev">&2
  $quietp || echo "timestamp: $stamp">&2
  pkglist=@list
  blacklist=@blacklist
  pkgondev=@pkgondev
  pkgtoget=@pkgtoget
  filetoget=@filetoget
  
  test "$(basename $(pwd))" = apps && cd ..
  test -r "$pkglist" -o -d apps || {
    echo "No $pkglist file nor apps directory here.
      Please chdir to one of saadir which has '$pkglist' file and 'apps' dir.">&2
    exit 3
  }
  ! $listp && ! $dryrunp && cp -p "$pkglist" "$pkglist-$stamp-pre_$dev"

  $quietp || { echo; echo "**** compute supplements based on packages."; }>&2
  tPkgtoget_candidate=$(mktemp $pname.XXXXXXXX)
  trap "rm -f '$tPkgtoget_candidate'" 1 2 3 15 EXIT ERR
  $quietp || echo "make $pkgondev: pkgs-list on the device.">&2
  get-android-apps list -3 >"$pkgondev" ||
    { echo "get-android-apps -list: failed.">&2; rm -f "$pkgondev"; exit 5;}
  $quietp || echo "make $pkgtoget: list of pkgs to get (exist on the device but not saadir).">&2
  set-complement "$pkgondev" "$pkglist" >"$tPkgtoget_candidate" ||
    { echo "make $pkgtoget: failed.">&2;  exit 6;}
  if test -r "$blacklist"; then
    $quietp || echo "apply blacklist $blacklist to $pkgtoget.">&2
    set-complement "$tPkgtoget_candidate" "$blacklist" >"$pkgtoget" ||
      { echo "apply $blacklist: failed.">&2; rm -f "$pkgtoget"; exit 7;}
    rm -f "$tPkgtoget_candidate"
  else
    mv "$tPkgtoget_candidate" "$pkgtoget"
  fi
  trap - 1 2 3 15 EXIT ERR

  if $listp; then
    echo -------- Packages to get:
    cat "$pkgtoget"
    echo -------- end of Packages to get:
    rm "$pkgtoget"
  else
    if test $(cat "$pkgtoget" | wc -l) -eq 0; then
      $quietp || echo "No packages to get.">&2
    else
      cd apps
      for obj in $targets; do
        $quietp || echo "get $obj files of $pkgtoget pkgs.">&2
        run get-android-apps $obj $(cat ../"$pkgtoget")
      done
      cd ..
      if $dryrunp; then
        rm "$pkgtoget"
      else
        mv "$pkgtoget" "$pkgtoget-$stamp-$dev"
      fi
    fi
  fi

  $quietp || { echo; echo "**** compute supplements based on files."; }>&2
  tPkgtochk_candidate=$(mktemp $pname.XXXXXXXX)
  tPkgtochk_last=$(mktemp $pname.XXXXXXXX)
  trap "rm -f '$tPkgtochk_candidate' '$tPkgtochk_last'" 1 2 3 15 EXIT ERR
  $quietp || echo "make list of exist pkgs both on the device and the saadir.">&2
  set-product "$pkgondev" "$pkglist" >"$tPkgtochk_candidate" ||
    { echo "set-product: failed.">&2;  exit 16;}
  if test -r "$blacklist"; then
    $quietp || echo "apply blacklist $blacklist to the list.">&2
    set-complement "$tPkgtochk_candidate" "$blacklist" >"$tPkgtochk_last" ||
      { echo "set-complement: failed.">&2; rm -f "$tPkgtochk_last"; exit 17;}
    rm -f "$tPkgtochk_candidate"
  else
    mv "$tPkgtochk_candidate" "$tPkgtochk_last"
  fi
  trap "'$tPkgtochk_last'" 1 2 3 15 EXIT ERR
  
  tFilelist=$(mktemp $pname.XXXXXXXX)
  tFileorig=$(mktemp $pname.XXXXXXXX)
  trap "rm -f '$tPkgtochk_last' '$tFilelist' '$tFileorig'" 1 2 3 15 EXIT ERR
  $quietp || echo "make $tFilelist: file-list on the saadir.">&2
  (cd apps; ls *.apk *.ab >../"$tFilelist")
  $quietp || echo "make $tFileorig: file-list on the device.">&2
  for pkg in $(cat "$tPkgtochk_last"); do
    for obj in apk ab; do
      echo "$pkg.$obj">"$tFileorig"
    done
  done
  $quietp || echo "make $filetoget: list of files to get (exist on the device but not saadir).">&2
  set-complement "$tFileorig" "$tFilelist" >"$filetoget" ||
    { echo "set-complement: failed.">&2;  exit 18;}
  
  if $listp; then
    echo -------- Files to get:
    cat "$filetoget"
    echo -------- end of Files to get:
    rm "$filetoget"
  else
    if test $(cat "$filetoget" | wc -l) -eq 0; then
      $quietp || echo "No files to get.">&2
    else
      cd apps
      tFiletoget=$(mktemp $pname.XXXXXXXX)
      trap "rm -f '$tFiletoget' '$tPkgtochk_last' '$tFilelist' '$tFileorig'" 1 2 3 15 EXIT ERR
      for obj in $targets; do
        $quietp || echo "get $obj files of $filetoget files.">&2
        fgrep ".$obj" ../"$filetoget" >"$tFiletoget"
        mapfile -t files <"$tFiletoget"
        run get-android-apps $obj "${files[@]}"
      done
      rm -f "$tFiletoget"
      cd ..
      if $dryrunp; then
        rm "$filetoget"
      else
        mv "$filetoget" "$filetoget-$stamp-$dev"
      fi
    fi
  fi
  rm -f "$tPkgtochk_last" "$tFilelist" "$tFileorig"
  trap - 1 2 3 15 EXIT ERR

  if $listp || $dryrunp; then
    rm "$pkgondev"
  else
    cp -p "$pkglist" "$pkglist-$stamp-post_$dev"
    mv "$pkgondev" "$pkgondev-$dev-$stamp"
    "$dname"/saa-make-list ||
      { echo "saa-make-list: failed.">&2; exit 32;}
    #"$dname"/saa-make-desc
  fi
) 2>&1 | tee "$log"
